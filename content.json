{"pages":[{"title":"","text":"CAHq4jEeg3","link":"/baidu_verify_CAHq4jEeg3.html"},{"title":"","text":"google-site-verification: googlede7125997aeb2516.html","link":"/googlede7125997aeb2516.html"},{"title":"about","text":"个人简历 精通java研发，比较熟悉python、shell研发，熟悉c、汇编，web前端（HTML、css、js、angular等），android研发，较了解C++、R、PHP、ios研发，精通常见的设计模式，集合，多线程开发，线程安全，五种I0模型，精通JVM的结构和原理； 精通Spring,Spring,Spring boot,Spring cloud,Spring Mvc,Spring data jpa,mybatis,hibernate等开源框架； 精通restful风格的接口、dubbo风格的接口的设计与编写； 有过报表，定时任务，自己实现的单点登录，基于CAS企业级的单点登录，定制化视图，动环，傻瓜式部署开发经验； 熟悉Storm，Hadoop的原理，Tomcat集群，ngnix高可用，fastdfs集群，redis集群，solr集群，apache配置及部署； 熟悉常见的Linux命令，熟悉高并发分布式架构设计，熟悉云计算相关的业务与运维； 熟悉redis，memcache,mongodb,kafka中间件的原理及使用； 互联网电商架构及研发经验； 熟悉Sphinx，Lucene.Solr搜索引擎，ActiveMQ，RocketMQ，kafka消息中间件的原理及使用； 可以自己手动写一个RPC框架： 可以自己手动写一个MyBatis框架； 可以自己手动写一个Tomcat框架； 可以自己手动写一个SpringMVC框架； 可以自己手动写一个JDBC框架； 可以自己手动写一个Dubbo框架； 可以自己手动写一个Netty框架； 深入研究过编译器底层原理及源码，非常熟悉词法分析、语法分析，可从事编译器的研发； 较深入研究过linux操作系统内核底层原理及源码，系统调用、内存分配算法、进程间关系等，可从事操作系统内核的研发； 可以手动写一个正则表达式的引擎； 研究过大数据：Hadoop、Hdfs、Hive、pig、hbase、spark、flink、strom等框架，有一定的实战经验，可从事大数据的研发； 可以手动写一个Spring事务机制； 深入研究过sql server、mysql的底层架构（命令分析器、查询优化器、查询执行器、访问方法、缓存区管理器、事务管理器等），可从事数据库内核的研发； 对AI、机器学习、深度学习的模型建立、训练数据集、测试数据集、监督算法、无监督算法及整个算法流程有较深入的理解； 研究过网络安全，对xss、csrf、sql注入、ddos攻击、DNS劫持、arp攻击等有较深入的理解；对密码学有较深入的研究，精通web登录的流程及底层原理；熟悉网络攻击工具，比如：一句话木马、穿山甲、中国菜刀等。 对算法（递归、动态规划等）及数据结构（数组、链表、堆栈、B类树、二叉树、图等）有较深入的理解。 对传统互联网、移动互联网、大数据、云计算、Al、区块链等业务技术有较深入的理解； 可以手动写一个区块链； 有较深厚的数学功底，大学期间，高等数学竟赛荣获全校第一名，概率论、离散数学及线性代数大学成绩几乎满分； JVM调优，linux内核调优、Tcp/IP协议栈，数据库性能调优，ngnix、tomcat参数调优都有较丰富的经验。 以上 现跪求一份互联网端茶倒水月薪2k包吃住的工作！救救孩子吧！","link":"/about/index.html"},{"title":"","text":".content table td { text-align: center !important; width: 25%; height: 200px; border: none; } .content table td img { height: 100%; } window.onload = function(){ $(\".content table td img\").height(($(\".content table td img\").width()*7)/5); }; 电视剧 王国 辅佐官 秘密森林 毒枭 毒枭：墨西哥 绝命毒师 风骚律师 神探夏洛克 黑袍纠察队 龙樱 电影 江南1970 新世界 寄生虫 战争之王 肖申克的救赎 阿甘正传 楚门的世界 星际穿越 特工 局内人 杀人回忆 黄海 搏击俱乐部 功夫 禁闭岛 魔女 这个杀手不太冷 当幸福来敲门 看不见的客人 辩护人 釜山行 加勒比海盗 蝴蝶效应 沉默的羔羊 心灵捕手 致命ID 钢铁侠 恐怖直播 让子弹飞 天才枪手 火星救援 恐怖游轮 那些年，我们一起追的女孩 2001太空漫游 奇异博士 无人区 发条橙 中国合伙人 霍比特人 功夫熊猫 死侍 非常嫌疑犯 黑衣人 我是传奇 天下无贼 枪火 追击者 月球 华尔街之狼 社交网络 少林足球 十二猴子 银河系漫游指南","link":"/favorite/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"timeline","text":"2022-05-29:｜ 因Gitee Pages使用自定义域名需要付费, 故转移到Github Pages, 现为域名解析CNAME到Pages 2021-02-25:｜ 由于弃坑阿里云，且Github Pages服务访问异常，故将blog迁移到Gitee Pages 2020-05-08:｜ 百度收录链接已达5个 2020-03-22:｜ 给站点加上百度、谷歌统计，启用busuanzi插件 2020-03-17:｜ 阿里云服务器 2020-03-17 00:00:00 已到期 2020-02-02:｜ 在家上班第三天｜ 阿里云服务器快到期了，不打算续费（因为穷），就把之前的站点迁到GitHub了 2019-08-06｜ 老大不在，不能开通git权限，熟悉项目文档｜ 拉取项目代码，建表并生成数据访问层文件且已提交Git 2019-08-05｜ 上午办理入职手续｜ 下午熟悉项目文档，等待运维开通相关账号","link":"/timeline/index.html"}],"posts":[{"title":"Idea 自定义 logger 模板","text":"","link":"/post/e32c41be.html"},{"title":"jar包生成pom文件","text":"在nexus中，如果没有pom文件，使用maven打包时会报错 maven命令： 1mvn install:install-file -Dfile=D:\\TSBrowserDownloads\\SF-CSIM-EXPRESS-SDK-V1.6-180808\\SF-CSIM-EXPRESS-SDK-V1.6\\SF-CSIM-EXPRESS-SDK-V1.6.jar -DgroupId=com.sf -DartifactId=SF-CSIM-EXPRESS-SDK-V1.6 -Dversion=1.6 -Dpackaging=jar -DgeneratePom=true 12345&lt;dependency&gt; &lt;groupId&gt;com.sf&lt;/groupId&gt; &lt;artifactId&gt;SF-CSIM-EXPRESS-SDK&lt;/artifactId&gt; &lt;version&gt;1.6.0&lt;/version&gt;&lt;/dependency&gt; -Dfile：包的本地绝对路径 -DgroupId：pom.xml中groupId -DartifactId：pom.xml中artifactId -Dversion：pom.xml中的版本号1.6.0 -Dpackaging：jar或war,包的后缀名 -DgeneratePom：是否生成pom文件","link":"/post/65223.html"},{"title":"jvisualvm 增加运行内存","text":"在使用JDK中的jvisualvm来分析内存快照时，经常会提示没有足够的内存来加载快照，那么如何向jvisualvm提供JVM参数呢？ 1.修改配置文件 修改%JDK_HOME%\\lib\\visualvm\\etc\\visualvm.conf配置文件中的内存设置Xms和Xmx。 2.运行时添加参数 1jvisualvm -J-Xms1024m -J-Xmx2048m 用于临时修改内存大小。","link":"/post/cecfc069.html"},{"title":"MyBatis-Plus 的快速入门","text":"本文为转载，仅做备忘记录，侵删 原作者：tyronczt 原地址：https://github.com/tyronczt/java-learn/tree/master/Tools/mybatis-plus MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。 MyBatis-Plus的特点： 润物无声：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑； 效率至上：只需简单配置，即可快速进行 CRUD 操作，从而节省大量时间； 丰富功能：热加载、代码生成、分页、性能分析等功能一应俱全。 本文主要基于 MyBatis-Plus 的官方文档：https://mybatis.plus/guide/ 及 慕课网的 MyBatis-Plus入门：https://www.imooc.com/learn/1130 进行案例说明。 快速开始参考官方文档：https://mybatis.plus/guide/quick-start.html【很详细】 本项目GitHub地址：https://github.com/tyronczt/java-learn/tree/master/Tools/mybatis-plus CRUD–增加(Create)GitHub地址：https://github.com/tyronczt/java-learn/blob/master/Tools/mybatis-plus/src/test/java/com/tyron/mp/InsertTest.java 123456789public void insert() { User user = new User(); user.setName(\"彭万里\"); user.setAge(39); user.setCreateTime(LocalDateTime.now()); user.setManagerId(1088248166370832385L); int effectNum = userMapper.insert(user); Assert.assertEquals(1, effectNum);} CRUD–读取(Retrieve)GitHub地址：https://github.com/tyronczt/java-learn/blob/master/Tools/mybatis-plus/src/test/java/com/tyron/mp/SelectTests.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284/** * 1、名字中包含雨并且年龄小于40 * name like '%雨%' and age&lt;40 * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ? AND age &lt; ?) * Parameters: %雨%(String), 40(Integer) */ @Test public void selectOne() { List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().like(User::getName, \"雨\").lt(User::getAge, 40)); users.forEach(System.out::println); } /** * 2、名字中包含雨年并且龄大于等于20且小于等于40并且email不为空 * name like '%雨%' and age between 20 and 40 and email is not null * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL) * Parameters: %雨%(String), 20(Integer), 40(Integer) */ @Test public void selectTwo() { List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().like(User::getName, \"雨\").between(User::getAge, 20, 40).isNotNull(User::getEmail)); users.forEach(System.out::println); } /** * 3、名字为王姓或者年龄大于等于25，按照年龄降序排列，年龄相同按照id升序排列 * name like '王%' or age&gt;=25 order by age desc,id asc * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ? OR age &gt;= ?) ORDER BY age DESC , id ASC * Parameters: 王%(String), 25(Integer) */ @Test public void selectThree() { List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().likeRight(User::getName, \"王\") .or().ge(User::getAge, 25).orderByDesc(User::getAge).orderByAsc(User::getId)); users.forEach(System.out::println); } /** * 4、创建日期大于当天并且直属上级为名字为王姓 * date_format(create_time,'%Y-%m-%d')&gt;= LocalDate.now() and manager_id in (select id from user where name like '王%') * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (date_format(create_time,'%Y-%m-%d') &gt;= ? AND manager_id IN * (select id from user where name like '王%')) * * Parameters: 2020-04-19(LocalDate) */ @Test public void selectFour() { List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().apply(\"date_format(create_time,'%Y-%m-%d') &gt;= {0}\", LocalDate.now()). inSql(User::getManagerId, \"select id from user where name like '王%'\")); users.forEach(System.out::println); } /** * 5、名字为王姓并且（年龄小于40或邮箱不为空） * name like '王%' and (age&lt;40 or email is not null) * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ? AND ( (age &lt; ? OR email IS NOT NULL) )) * 王%(String), 40(Integer) */ @Test public void selectFive() { List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().likeRight(User::getName, \"王\"). and(i -&gt; i.lt(User::getAge, 40).or().isNotNull(User::getEmail))); users.forEach(System.out::println); } /** * 6、名字为王姓或者（年龄小于40并且年龄大于20并且邮箱不为空） * name like '王%' or (age&lt;40 and age&gt;20 and email is not null) * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ? OR ( (age &lt; ? AND age &gt; ? AND email IS NOT NULL) )) * 王%(String), 40(Integer), 20(Integer) */ @Test public void selectSix() { List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().likeRight(User::getName, \"王\"). or(i -&gt; i.lt(User::getAge, 40).gt(User::getAge, 20).isNotNull(User::getEmail))); users.forEach(System.out::println); } /** * 7、（年龄小于40或邮箱不为空）并且名字为王姓 * (age&lt;40 or email is not null) and name like '王%' * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (( (age &lt; ? OR email IS NOT NULL) ) AND name LIKE ?) * 40(Integer), 王%(String) */ @Test public void selectSeven() { List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().and(i -&gt; i.lt(User::getAge, 40). or().isNotNull(User::getEmail)).likeRight(User::getName, \"王\")); users.forEach(System.out::println); } /** * 8、年龄为30、31、34、35 * age in (30、31、34、35) * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (age IN (?,?,?,?)) * 30(Integer), 31(Integer), 34(Integer), 35(Integer) */ @Test public void selectEight() { List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().in(User::getAge, Arrays.asList(30, 31, 34, 35))); users.forEach(System.out::println); } /** * 9、只返回满足条件的其中一条语句即可 * limit 1 * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (age IN (?,?,?,?)) limit 1 * 30(Integer), 31(Integer), 34(Integer), 35(Integer) */ @Test public void selectNine() { List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().in(User::getAge, Arrays.asList(30, 31, 34, 35)).last(\"limit 1\")); users.forEach(System.out::println); } /** * 10、名字中包含雨并且年龄小于40(需求1加强版) * 第一种情况：select id,name * from user * where name like '%雨%' and age&lt;40 * * SELECT id,name FROM user WHERE (name LIKE ? AND age &lt; ?) * Parameters: %雨%(String), 40(Integer) * * 第二种情况：select id,name,age,email * from user * where name like '%雨%' and age&lt;40 * * SELECT id,name,email,age FROM user WHERE (name LIKE ? AND age &lt; ?) * Parameters: %雨%(String), 40(Integer) */ @Test public void selectTen1() { List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().select(User::getId, User::getName).like(User::getName, \"雨\").lt(User::getAge, 40)); users.forEach(System.out::println); } @Test public void selectTen2() { List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().select(User.class, one -&gt; !one.getColumn().equals(\"create_time\") &amp;&amp; !one.getColumn().equals(\"manager_id\")).like(User::getName, \"雨\").lt(User::getAge, 40)); users.forEach(System.out::println); } /** * 11、按照直属上级分组，查询每组的平均年龄、最大年龄、最小年龄。并且只取年龄总和小于500的组。 * select avg(age) avg_age,min(age) min_age,max(age) max_age * from user group by manager_id * having sum(age) &lt;500 * * SELECT avg(age) avg_age,min(age) min_age,max(age) max_age FROM user GROUP BY manager_id HAVING sum(age) &lt; ? * Parameters: 500(Integer) */ @Test public void selectEleven() { List&lt;Map&lt;String, Object&gt;&gt; users = userMapper.selectMaps(new QueryWrapper&lt;User&gt;().select(\"avg(age) avg_age\", \"min(age) min_age\", \"max(age) max_age\").lambda(). groupBy(User::getManagerId).having(\"sum(age) &lt; {0}\", 500)); users.forEach(System.out::println); } /** * 12、按条件查询用户，姓名为王(查询条件有姓名和email） * 当email为空时，不作为查询条件 * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ?) * Parameters: %王%(String) */ @Test public void selectTwelve() { String name = \"王\"; String email = \"\"; List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().lambda().like(StringUtils.isNotEmpty(name), User::getName, name). like(StringUtils.isNotEmpty(email), User::getEmail, email)); users.forEach(System.out::println); } /** * 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值 * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ?) * Parameters: %雨%(String) * result: &lt;== Total: 3 * 1094590409767661570 * 1094592041087729666 * 1251822253776068610 */ @Test public void selectObjs() { List&lt;Object&gt; users = userMapper.selectObjs(new QueryWrapper&lt;User&gt;().lambda().like(User::getName, \"雨\")); users.forEach(System.out::println); } /** * 根据 Wrapper 条件，查询总记录数 * * SELECT COUNT( 1 ) FROM user WHERE (name LIKE ?) * Parameters: %雨%(String) * 查询数量：3 */ @Test public void selectCount() { Integer count = userMapper.selectCount(new QueryWrapper&lt;User&gt;().lambda().like(User::getName, \"雨\")); System.out.println(\"查询数量：\" + count); } /** * 根据 entity 条件，查询一条记录 * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ?) limit 1 * Parameters: %雨%(String) */ @Test public void selectOneUser() { User user = userMapper.selectOne(new QueryWrapper&lt;User&gt;().lambda().like(User::getName, \"雨\").last(\"limit 1\")); System.out.println(\"查询用户：\" + user); } /** * 通过map查询列表 * * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name = ? AND age = ?) * Parameters: 李艺伟(String), 28(Integer) */ @Test public void selectAlleq() { HashMap&lt;String, Object&gt; hashMap = new HashMap&lt;&gt;(); hashMap.put(\"name\", \"李艺伟\"); hashMap.put(\"age\", 28); hashMap.put(\"email\", null); List&lt;User&gt; users = userMapper.selectList(new QueryWrapper&lt;User&gt;().allEq(hashMap, false)); users.forEach(System.out::println); } /** * 为了减少实现类的代码量 --&gt; LambdaQueryChainWrapper * * Preparing: SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ?) * Parameters: %雨%(String) */ @Test public void selectLambdaQueryChainWrapper() { List&lt;User&gt; users = new LambdaQueryChainWrapper&lt;&gt;(userMapper).like(User::getName, \"雨\").list(); users.forEach(System.out::println); } /*********************************分页方法***************************************/ /** * SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ?) LIMIT ?,? * Parameters: %雨%(String), 0(Long), 2(Long) * * User(id=1094590409767661570, name=张雨琪, age=31, email=zjq@baomidou.com, managerId=1088248166370832385, createTime=2019-01-14T09:15:15) * User(id=1094592041087729666, name=刘红雨, age=32, email=lhm@baomidou.com, managerId=1088248166370832385, createTime=2019-01-14T09:48:16) */ @Test public void selectPage() { Page&lt;User&gt; page = new Page&lt;&gt;(1, 2, false); IPage&lt;User&gt; userIPage = userMapper.selectPage(page, new QueryWrapper&lt;User&gt;().lambda().like(User::getName, \"雨\")); List&lt;User&gt; records = userIPage.getRecords(); records.forEach(System.out::println); } /** * Preparing: SELECT name FROM user WHERE (name LIKE ?) LIMIT ?,? * Parameters: %雨%(String), 0(Long), 2(Long) * * {name=张雨琪} * {name=刘红雨} */ @Test public void selectMapsPage() { Page&lt;User&gt; page = new Page&lt;&gt;(1, 2, false); IPage&lt;Map&lt;String, Object&gt;&gt; userIPage = userMapper.selectMapsPage(page, new QueryWrapper&lt;User&gt;().lambda().select(User::getName).like(User::getName, \"雨\")); List&lt;Map&lt;String, Object&gt;&gt; records = userIPage.getRecords(); records.forEach(System.out::println); } CRUD–更新(Update)GitHub地址：https://github.com/tyronczt/java-learn/blob/master/Tools/mybatis-plus/src/test/java/com/tyron/mp/UpdateTest.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162/** * 根据Id更新记录 * &lt;p&gt; * UPDATE user SET email=? WHERE id=? * ==&gt; Parameters: aaa@aa.com(String), 1251822253776068610(Long) * &lt;== Updates: 1 * 更新记录数：1 */ @Test public void updateById() { User user = new User(); user.setId(1251822253776068610L); user.setEmail(\"aaa@aa.com\"); int effectNum = userMapper.updateById(user); System.out.println(\"更新记录数：\" + effectNum); } /** * 根据条件更新记录 * &lt;p&gt; * ==&gt; Preparing: UPDATE user SET age=? WHERE (name LIKE ?) * ==&gt; Parameters: 30(Integer), %雨%(String) * &lt;== Updates: 3 * 更新记录数：3 */ @Test public void updateByWapper() { User user = new User(); user.setAge(30); int effectNum = userMapper.update(user, new UpdateWrapper&lt;User&gt;().lambda().like(User::getName, \"雨\")); System.out.println(\"更新记录数：\" + effectNum); } /** * 根据条件更新记录(不设置实体类） * &lt;p&gt; * ==&gt; Preparing: UPDATE user SET age=? WHERE (name LIKE ?) * ==&gt; Parameters: 31(Integer), %雨%(String) * &lt;== Updates: 3 * 更新记录数：3 */ @Test public void updateByWapperNoEntity() { UpdateWrapper&lt;User&gt; updateWrapper = new UpdateWrapper&lt;&gt;(); updateWrapper.like(\"name\", \"雨\").set(\"age\", 31); int effectNum = userMapper.update(null, updateWrapper); System.out.println(\"更新记录数：\" + effectNum); } /** * 通过lambda链并根据条件更新记录 * &lt;p&gt; * ==&gt; Preparing: UPDATE user SET age=? WHERE (name LIKE ?) * ==&gt; Parameters: 32(Integer), %雨%(String) * &lt;== Updates: 3 * 是否更新成功：true */ @Test public void updateByWapperLambdaChain() { boolean ifUpdate = new LambdaUpdateChainWrapper&lt;&gt;(userMapper).like(User::getName, \"雨\").set(User::getAge, 32).update(); System.out.println(\"是否更新成功：\" + ifUpdate); } CRUD–删除(Delete)GitHub地址：https://github.com/tyronczt/java-learn/blob/master/Tools/mybatis-plus/src/test/java/com/tyron/mp/DeleteTest.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657/** * 根据id删除记录 * &lt;p&gt; * ==&gt; Preparing: DELETE FROM user WHERE id=? * ==&gt; Parameters: 1251736344246480897(Long) * &lt;== Updates: 1 * 影响记录数：1 */ @Test public void delete() { int effectNum = userMapper.deleteById(1251736344246480897L); System.out.println(\"影响记录数：\" + effectNum); } /** * 根据map删除记录 * &lt;p&gt; * ==&gt; Preparing: DELETE FROM user WHERE name = ? * ==&gt; Parameters: 彭万里(String) * &lt;== Updates: 1 * 影响记录数：1 */ @Test public void deleteByMap() { Map&lt;String, Object&gt; columnMap = new HashMap&lt;&gt;(); columnMap.put(\"name\", \"彭万里\"); int effectNum = userMapper.deleteByMap(columnMap); System.out.println(\"影响记录数：\" + effectNum); } /** * 批量删除记录 * &lt;p&gt; * ==&gt; Preparing: DELETE FROM user WHERE id IN ( ? , ? ) * ==&gt; Parameters: 1259468580001419266(Long), 1259468591753863169(Long) * &lt;== Updates: 2 * 影响记录数：2 */ @Test public void deleteBatchIds() { int effectNum = userMapper.deleteBatchIds(Arrays.asList(1259468580001419266L, 1259468591753863169L)); System.out.println(\"影响记录数：\" + effectNum); } /** * 根据条件删除记录 * &lt;p&gt; * ==&gt; Preparing: DELETE FROM user WHERE (name = ?) * ==&gt; Parameters: 欧阳雨(String) * &lt;== Updates: 1 * 影响记录数：1 */ @Test public void deleteByWapper() { int effectNum = userMapper.delete(new QueryWrapper&lt;User&gt;().lambda().eq(User::getName, \"欧阳雨\")); System.out.println(\"影响记录数：\" + effectNum); } AR模式GitHub地址：https://github.com/tyronczt/java-learn/blob/master/Tools/mybatis-plus/src/test/java/com/tyron/mp/ARModelTest.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566/** * AR 模式新增记录 * 需要在User类中继承Model&lt;User&gt; * * ==&gt; Preparing: INSERT INTO user ( id, create_time, name, manager_id, age ) VALUES ( ?, ?, ?, ?, ? ) * ==&gt; Parameters: 1259474874313797634(Long), 2020-05-10T21:26:24.419(LocalDateTime), 哈哈哈(String), 1088248166370832385(Long), 29(Integer) * &lt;== Updates: 1 */ @Test public void insert() { User user = new User(); user.setName(\"哈哈哈\"); user.setAge(29); user.setCreateTime(LocalDateTime.now()); user.setManagerId(1088248166370832385L); boolean ifInsert = user.insert(); Assert.assertEquals(true, ifInsert); } /** * ==&gt; Preparing: SELECT id,create_time,name,manager_id,email,age FROM user WHERE id=? * ==&gt; Parameters: 1259474874313797634(Long) * &lt;== Columns: id, create_time, name, manager_id, email, age * &lt;== Row: 1259474874313797634, 2020-05-10 11:26:24, 哈哈哈, 1088248166370832385, null, 29 * &lt;== Total: 1 * User(id=1259474874313797634, name=哈哈哈, age=29, email=null, managerId=1088248166370832385, createTime=2020-05-10T11:26:24) * false */ @Test public void selectById() { User user = new User(); user.setId(1259474874313797634L); User selectUser = user.selectById(); System.out.println(selectUser); System.out.println(user == selectUser); } /** * ==&gt; Preparing: UPDATE user SET age=? WHERE id=? * ==&gt; Parameters: 30(Integer), 1259474874313797634(Long) * &lt;== Updates: 1 * true */ @Test public void updateById() { User user = new User(); user.setId(1259474874313797634L); user.setAge(30); boolean ifUpdate = user.updateById(); System.out.println(ifUpdate); } /** * ==&gt; Preparing: DELETE FROM user WHERE id=? * ==&gt; Parameters: 1259474874313797634(Long) * &lt;== Updates: 1 * true */ @Test public void deleteById() { User user = new User(); user.setId(1259474874313797634L); boolean ifDelete = user.deleteById(); System.out.println(ifDelete); } 服务类接口GitHub：https://github.com/tyronczt/java-learn/blob/master/Tools/mybatis-plus/src/test/java/com/tyron/mp/ServiceTest.java 服务接口需要继承IService，形如：extends IService 服务接口实现类需要继承ServiceImpl，形如：extends ServiceImpl&lt;UserMapper, User&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113/** * 批量保存 * * ==&gt; Preparing: INSERT INTO user ( id, name, age ) VALUES ( ?, ?, ? ) * ==&gt; Parameters: 1259497162086076417(Long), 张华(String), 33(Integer) * ==&gt; Parameters: 1259497162241265666(Long), 岳华(String), 32(Integer) * true */ @Test public void saveBatch() { User user1 = new User(); user1.setName(\"张华\"); user1.setAge(33); User user2 = new User(); user2.setName(\"岳华\"); user2.setAge(32); List&lt;User&gt; userList = Arrays.asList(user1, user2); boolean saveBatch = userService.saveBatch(userList); System.out.println(saveBatch); } /** * 批量保存或更新 * * ==&gt; Preparing: INSERT INTO user ( id, name, age ) VALUES ( ?, ?, ? ) * ==&gt; Parameters: 1259497692317458433(Long), 张华(String), 31(Integer) * ==&gt; Preparing: SELECT id,create_time,name,manager_id,email,age FROM user WHERE id=? * ==&gt; Parameters: 1259497162241265666(Long) * &lt;== Columns: id, create_time, name, manager_id, email, age * &lt;== Row: 1259497162241265666, null, 岳华, null, null, 32 * &lt;== Total: 1 * ==&gt; Preparing: UPDATE user SET name=?, age=? WHERE id=? * ==&gt; Parameters: 岳华花(String), 30(Integer), 1259497162241265666(Long) * true */ @Test public void saveOrUpdateBatch() { User user1 = new User(); user1.setName(\"张华\"); user1.setAge(31); User user2 = new User(); user2.setId(1259497162241265666L); user2.setName(\"岳华花\"); user2.setAge(30); List&lt;User&gt; userList = Arrays.asList(user1, user2); boolean saveBatch = userService.saveOrUpdateBatch(userList); System.out.println(saveBatch); } /** * Expected one result (or null) to be returned by selectOne(), but found: 2 * 增加false参数 * * ==&gt; Preparing: SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ?) * ==&gt; Parameters: %雨%(String) * &lt;== Columns: id, create_time, name, manager_id, email, age * &lt;== Row: 1094590409767661570, 2019-01-14 09:15:15, 张雨琪, 1088248166370832385, zjq@baomidou.com, 32 * &lt;== Row: 1094592041087729666, 2019-01-14 09:48:16, 刘红雨, 1088248166370832385, lhm@baomidou.com, 32 * &lt;== Total: 2 * Warn: execute Method There are 2 results. * User(id=1094590409767661570, name=张雨琪, age=32, email=zjq@baomidou.com, managerId=1088248166370832385, createTime=2019-01-14T09:15:15) */ @Test public void selectOne() { User user = userService.getOne(new QueryWrapper&lt;User&gt;().lambda().like(User::getName, \"雨\"), false); System.out.println(user); } /** * selectList * * ==&gt; Preparing: SELECT id,create_time,name,manager_id,email,age FROM user WHERE (name LIKE ?) * ==&gt; Parameters: %雨%(String) * &lt;== Columns: id, create_time, name, manager_id, email, age * &lt;== Row: 1094590409767661570, 2019-01-14 09:15:15, 张雨琪, 1088248166370832385, zjq@baomidou.com, 32 * &lt;== Row: 1094592041087729666, 2019-01-14 09:48:16, 刘红雨, 1088248166370832385, lhm@baomidou.com, 32 * &lt;== Total: 2 * User(id=1094590409767661570, name=张雨琪, age=32, email=zjq@baomidou.com, managerId=1088248166370832385, createTime=2019-01-14T09:15:15) * User(id=1094592041087729666, name=刘红雨, age=32, email=lhm@baomidou.com, managerId=1088248166370832385, createTime=2019-01-14T09:48:16) */ @Test public void selectList() { List&lt;User&gt; users = userService.lambdaQuery().like(User::getName, \"雨\").list(); users.forEach(System.out::println); } /** *按条件更新记录 * ==&gt; Preparing: UPDATE user SET age=? WHERE (name LIKE ?) * ==&gt; Parameters: 28(Integer), %雨%(String) * &lt;== Updates: 2 * true */ @Test public void updateByWapper() { boolean update = userService.lambdaUpdate().like(User::getName, \"雨\").set(User::getAge, 28).update(); System.out.println(update); } /** * 按条件删除记录 * ==&gt; Preparing: DELETE FROM user WHERE (name LIKE ?) * ==&gt; Parameters: %华%(String) * &lt;== Updates: 3 * true */ @Test public void remove() { boolean remove = userService.lambdaUpdate().like(User::getName, \"华\").remove(); System.out.println(remove); }","link":"/post/e1f79887.html"},{"title":"idea 在 service 窗口中显示多个服务","text":"在项目根目录.idea/workspace.xml中找到RunDashboard组件（如果没有则新增一项），添加一个option。 1234567&lt;component name=\"RunDashboard\"&gt; &lt;option name=\"configurationTypes\"&gt; &lt;set&gt; &lt;option value=\"SpringBootApplicationConfigurationType\" /&gt; &lt;/set&gt; &lt;/option&gt;&lt;/component&gt; 如下图所示：","link":"/post/f3626443.html"},{"title":"Java Lambda 使用技巧","text":"使用groupingBy对集合进行分组 1234567// 分组Map&lt;String, List&lt;User&gt;&gt; groupBySex = userList.stream().collect(Collectors.groupingBy(User::getSex));// 遍历分组for (Map.Entry&lt;String, List&lt;User&gt;&gt; entryUser : groupBySex.entrySet()) { String key = entryUser.getKey(); List&lt;User&gt; entryUserList = entryUser.getValue();} 使用sort进行排序 123456// 单字段排序，根据id排序userList.sort(Comparator.comparing(User::getId));// 反序userList.sort(Comparator.comparing(User::getId).reversed());// 多字段排序，根据id，年龄排序 userList.sort(Comparator.comparing(User::getId).thenComparing(User::getAge)); 拉取集合单个属性 12// 获取list对象的某个字段组装成新listList&lt;Long&gt; userIdList = userList.stream().map(User::getId).collect(Collectors.toList()); 获取最值 1234// 最小Date minEntryDate = userList.stream().map(User::getEntryDate).min(Date::compareTo).get();// 最大Date maxEntryDate = userList.stream().map(User::getEntryDate).max(Date::compareTo).get(); 获取最值对应对象 12Comparator&lt;LeasingBusinessContract&gt; comparator = Comparator.comparing(LeasingBusinessContract::getLeaseEndDate);LeasingBusinessContract maxObject = leasingBusinessContractList.stream().max(comparator).get();","link":"/post/b27447f9.html"},{"title":"CentOS 7 关闭 selinux","text":"查看selinux状态（enforcing为开启、disable为关闭） 1getenforce 临时关闭selinux 1setenforce 0 永久关闭selinux 1vi /etc/selinux/config 123SELINUX=enforcing改为SELINUX=disabled 重启生效","link":"/post/61407.html"},{"title":"CentOS 7 关闭防火墙","text":"查看防火墙状态 1systemctl status firewalld 临时关闭，重启后自动启动 1systemctl stop firewalld 禁用防火墙，重启后也不会启动 1systemctl disable firewalld","link":"/post/31909.html"},{"title":"Docker 容器间的相互通信","text":"方法一：使用link 用这方法弄了好久，还没弄明白，且正式环境不会用这种方式，逐放弃。 方法二：使用自定义网络 查看docker网络 1docker network ls 创建连接方式为bridge的网络，my-bridge为自定义网络的名字 1docker network create -d bridge my-bridge 将容器连接到自定义网络 手动连接1 docker network connect my-bridge my-container-id 启动时连接，docker run时加入参数1 --network my-bridge 查看容器是否连接上自定义网络 1docker network inspect my-bridge 连接完成！ PS：容器间访问可以直接使用容器别名Name访问，无需使用局域网IP。","link":"/post/25215.html"},{"title":"Docker 安装 MySql","text":"环境： macOS 10.15.4 Docker-Desktop Community v2.2.0.5(43884) MySql 5.7 步骤： 拉取官方镜像（注意：latest版本目前为8，会有问题，所以需要指定mysql版本） 1docker pull mysql:5.7 查看镜像是否拉取成功 1docker images 运行容器 12345678910docker run \\-p 3306:3306 \\--name mymysql \\-v $PWD/conf:/etc/mysql/conf.d \\-v $PWD/logs:/logs \\-v $PWD/data:/var/lib/mysql \\-e MYSQL_ROOT_PASSWORD=123456 \\-d \\mysql:5.7 \\--lower_case_table_names=1 注意避坑：lower_case_table_names 表名忽略大小写，这个参数必须要加上，不然有可能导致数据库不能识别表名大小写，后期改动很麻烦(CSDN上的互抄博客让我多走不少弯路)。 查看容器的运行信息 1docker ps 进入容器内部 1docker exec -it mymysql /bin/bash 进入mysql： 1mysql -u root -p 授权 1mysql&gt; GRANT ALL ON *.* TO 'root'@'%'; 刷新权限： 1mysql&gt; flush privileges; 更新加密规则： 1mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER; 更新root用户密码： 1mysql&gt; ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456'; 刷新权限： 1mysql&gt; flush privileges;","link":"/post/7791.html"},{"title":"Docker 安装 Nacos","text":"拉取最新版本官方镜像 1docker pull nacos/nacos-server:1.2.0 PS：使用Mac版Docker-Desktop+nacos:1.2.1时会出现配置一直change问题，退回至1.2.0正常，具体暂未深究。 查看镜像是否拉取成功 1docker images 运行容器 这里的端口8848:8848是指容器映射到宿主机的关系，容器内部应用运行端口需另行修改 常规启动 1docker run --env MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-server:1.2.0 自定义环境参数启动 1234567891011 docker run \\--env MODE=standalone \\--env NACOS_SERVER_PORT=8001 \\--env SPRING_DATASOURCE_PLATFORM=mysql \\--env MYSQL_SERVICE_HOST=192.168.34.129 \\--env MYSQL_SERVICE_PORT=3306 \\--env MYSQL_SERVICE_DB_NAME=febs_nacos \\--env MYSQL_SERVICE_USER=root \\--env MYSQL_SERVICE_PASSWORD=123456 \\--env NACOS_DEBUG=n \\--name nacos -d -p 8001:8001 nacos/nacos-server:1.2.0 查看容器的运行信息 1docker ps 进入容器内部 1docker exec -it nacos /bin/bash 修改nacos配置文件(如果用自定义环境参数启动则无需修改配置文件) 1vi conf/application.properties application.properties 123456789#端口默认为8848，请自行定义server.port=8001spring.datasource.platform=mysql#这里的IP为宿主机IPdb.url.0=jdbc:mysql://172.16.126.128:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true#只有一个数据库的话，则注释掉其他数据库配置#db.url.1=...db.user=rootdb.password=123456 重启容器 1docker restart nacos 登陆后台 http://localhost:8001/nacos 默认账号密码：nacos/nacos","link":"/post/55653.html"},{"title":"Docker 安装 RabbitMQ","text":"拉取最新版本官方镜像 12#指定版本，该版本包含了web控制页面docker pull rabbitmq:management 查看镜像是否拉取成功 1docker images 运行容器 12345#方式一：默认guest 用户，密码也是 guestdocker run -d --hostname my-rabbit --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq:management#方式二：设置用户名和密码docker run -d --hostname my-rabbit --name rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=123456 -p 15672:15672 -p 5672:5672 rabbitmq:management 查看容器的运行信息 1docker ps 访问UI页面 1http://localhost:15672/ 进入容器内部 1docker exec -it my-rabbit /bin/bash","link":"/post/26837.html"},{"title":"Docker 安装 Redis","text":"拉取最新版本官方镜像 1docker pull redis:latest 查看镜像是否拉取成功 1docker images 运行容器 1docker run -itd --name redis-test -p 6379:6379 redis 查看容器的运行信息 1docker ps 进入容器内部 1docker exec -it redis-test /bin/bash","link":"/post/18951.html"},{"title":"Docker 安装 zipkin","text":"拉取最新版本官方镜像 1docker pull openzipkin/zipkin 查看镜像是否拉取成功 1docker images 运行容器（默认端口：9411） 1docker run -d -p 8402:8402 openzipkin/zipkin 查看容器的运行信息 1docker ps 进入容器内部 1docker exec -it openzipkin /bin/bash","link":"/post/22323.html"},{"title":"Docker修改容器端口映射","text":"查看容器信息 1docker container ls -a 停止容器 1docker stop ed5d77342129 停止docker 1systemctl stop docker 修改这个容器的hostconfig.json文件中的端口（如果config.v2.json里面也记录了端口） 123cd /var/lib/docker/containers/ed5d77342129*vi hostconfig.jsonvi config.v2.json 启动docker服务 1systemctl start docker 批量启动容器 1docker container start $(docker container ls -a -q)","link":"/post/9375.html"},{"title":"Docker 简介及安装环境配置","text":"Docker 简介 Docker 引擎 Docker 整体架构 Docker 安装环境配置 关闭防火墙 1systemctl stop firewalld 1systemctl disable firewalld 关闭swap 1 swapoff -a $ 临时 1 vim /etc/fstab $ 永久 通过配置文件启动Docker,修改/etc/docker/daemon.json 文件并添加上 registry-mirrors 键值。 1vi /etc/docker/daemon.json 123456789{ \"registry-mirrors\": [ \"https://registry.docker-cn.com\", \"http://hub-mirror.c.163.com\", \"https://pee6w651.mirror.aliyuncs.com\", \"https://uxk0ognt.mirror.aliyuncs.com\", \"https://docker.mirrors.ustc.edu.cn\" ]} 保存 重启 Docker 以使配置生效。 1systemctl daemon-reload 1systemctl restart docker 1docker container start $(docker container ls -a -q)","link":"/post/57354.html"},{"title":"Linux 基本命令","text":"作者：王爵nice链接：https://zhuanlan.zhihu.com/p/28674639来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 本文为搬运过来的，侵删","link":"/post/81e01dcc.html"},{"title":"git commit 提交取消eslint校验","text":"eslint校验会使git提交失败，因此需要加参数--no-verify去掉验证 1git commit --no-verify -m \"commit\"","link":"/post/57a366c.html"},{"title":"CentOS虚拟机初始基本配置（一）","text":"刚装完CentOS时无法联网问题 原因：CentOS系统默认不联网使用ping www.baidu.com命令后提示ping：www.baidu.com：Name or service not known则表示机器没有联网 解决方案：修改网络配置文件 1vi /etc/sysconfig/network-scripts/ifcfg-ens33 此处33可能为其他数字，将ONBOOT=no改为ONBOOT=yes保存，然后reboot重启服务器。 无法使用ifconfig命令 输入yum search ifconfig命令，查看ifconfig所属命令包是net-tools.x86_64 输入yum install net-tools.x86_64安装工具包，确认时都输入y 安装完成","link":"/post/32150.html"},{"title":"iStat Menus 的安装与激活","text":"1.安装 iStat Menus 去官方网址下载，或者直接点击下载链接下载。 2.软件激活 Email: 1982092332@qq.com SN: 1GAWAE-FCWQ3-P8NYB-C7GF7-NEDRT-Q5DTB-MFZG6-6NEQC-CRMUD-8MZ2K-66SRB-SU8EW-EDLZ9-TGH3S-8SGA","link":"/post/a858bcac.html"},{"title":"Mac 安装 NodeJS","text":"去nodejs官网下载安装包（个人推荐下载LTS版本），一路Next安装就行了 https://nodejs.org/en/download/ 安装完后检查版本 1node -v &amp; nom -v 下载淘宝镜像 镜像官网：https://developer.aliyun.com/mirror/NPM?from=tnpm 命令： 1sudo npm install -g cnpm --registry=https://registry.npm.taobao.org 安装完成","link":"/post/23026.html"},{"title":"Mac 安装 VMware Fusion","text":"下载VMware Fusion（推荐下载11版本） 下载页面：http://www.carrotchou.blog/6722.html 11系列：https://download3.vmware.com/software/fusion/file/VMware-Fusion-11.5.2-15794494.dmg 10系列：https://download3.vmware.com/software/fusion/file/VMware-Fusion-10.1.5-10950653.dmg 注册机：https://carrot.ctfile.com/dir/11269771-25301131-9cfe01/ 激活软件 激活码：XKZYV-PK9CC-A1Y0X-K5HZL-Y65ZV（用注册机太麻烦） 安装Linux（CentOS7） 下载地址：http://mirrors.aliyun.com/centos/7/isos/x86_64/，阿里云镜像 我这下载的版本是CentOS-7-x86_64-Minimal-1908.iso VMware Fusion点击“从光盘或映像中安装”，自动安装系统即可","link":"/post/9192.html"},{"title":"软件收藏","text":"Mac版本Beyond Compare 4.3.0","link":"/post/50928.html"},{"title":" SpringBoot声明式事务控制-设置手动回滚","text":"当我们需要在事务控制的service层类中使用try catch 去捕获异常后，就会使事务控制失效，因为该类的异常并没有抛出，就不是触发事务管理机制。 怎样才能即使用try catch去捕获异常，而又让出现异常后spring回滚呢? 解决方案： 1TransactionAspectSupport.currentTransactionStatus().setRollbackOnly(); 能够使该方法执行完并正常返回值。 123456789101112@Transactionalpublic Boolean Test() { try { throw new Exception(&quot;出现异常&quot;); } catch (Exception e) { e.printStackTrace(); //设置手动回滚 TransactionAspectSupport.currentTransactionStatus().setRollbackOnly(); } //此时return语句能够执行 return true;}","link":"/post/42286.html"},{"title":"SpringBoot Junit 单元测试无法加载编译 src/main/resources 目录下的资源文件","text":"SpringBoot 集成 Junit，添加maven依赖 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 编写测试用例 12345678910111213141516171819202122232425package com.xyy.electronicsignatures.api.impl;import com.alibaba.fastjson.JSON;import lombok.extern.slf4j.Slf4j;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import javax.annotation.Resource;@Slf4j@RunWith(SpringRunner.class)@SpringBootTest(classes = {MyTestApplication.class})public class MyTest01 { @Resource private TestMapper testMapper; @Test public void Test01() { List&lt;Object&gt; list = testMapper.selectAll(); System.out.println(JSON.toJSONString(list)); }} 运行后发现找不到Mapper xml文件错误！ 解决办法： 方法一： 将src/main/resources/ 下面的配置文件拷贝一份到 src/test/resources 目录下。 但同一个配置需要维护两份，不建议。 方法二：修改pom.xml 配置， 将src/main/resources 目录下的文件编译到test-classes 下面去 12345678910&lt;build&gt; &lt;testResources&gt; &lt;testResource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;/testResource&gt; &lt;testResource&gt; &lt;directory&gt;src/test/resources&lt;/directory&gt; &lt;/testResource&gt; &lt;/testResources&gt;&lt;/build&gt;","link":"/post/12421.html"},{"title":"Spring声明式事务@Transactional详解","text":"一、源码（个人注释版）路径org.springframework.transaction.annotation.Transactional @Transactional 可以作用在接口、类、类方法。 作用于类：当把@Transactional 注解放在类上时，表示所有该类的public方法都配置相同的事务属性信息。作用于方法：当类配置了@Transactional，方法也配置了@Transactional，方法的事务会覆盖类的事务配置信息。作用于接口：不推荐这种使用方法，因为一旦标注在Interface上并且配置了Spring AOP 使用CGLib动态代理，将会导致@Transactional注解失效 1234567891011121314151617181920212223242526272829303132333435363738394041424344@Target({ElementType.METHOD, ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Inherited@Documentedpublic @interface Transactional { // 事务管理器，同transactionManager // 实现接口：org.springframework.transaction.PlatformTransactionManager // 默认实现：org.springframework.transaction.jta.JtaTransactionManage // org.springframework.jdbc.datasource.DataSourceTransactionManager @AliasFor(\"transactionManager\") String value() default \"\"; // 事务管理器，同value @AliasFor(\"value\") String transactionManager() default \"\"; // 事务传播类型 Propagation propagation() default Propagation.REQUIRED; // 事务的隔离级别 Isolation isolation() default Isolation.DEFAULT; // 事务超时时间，默认：-1，永不超时 int timeout() default TransactionDefinition.TIMEOUT_DEFAULT; // 设置是否只读，设置true之后会锁住库，如果有插入的话，会报异常：java.sql.SQLException // 只读事务用于业务代码只读但不修改数据的情形 boolean readOnly() default false; // 导致事务回滚的异常类数组 // 默认：RuntimeException和Error Class&lt;? extends Throwable&gt;[] rollbackFor() default {}; // 导致事务回滚的异常类名数组 String[] rollbackForClassName() default {}; // 不会导致事务回滚的异常类数组 Class&lt;? extends Throwable&gt;[] noRollbackFor() default {}; // 不会导致事务回滚的异常类名数组 String[] noRollbackForClassName() default {};} 二、属性说明 Propagation，事务传播类型 123456789101112131415161718192021222324252627282930public enum Propagation { // 默认值，如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务 REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED), // 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。 SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS), // 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常 MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY), // 创建一个新的事务，如果当前存在事务，则把当前事务挂起 REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW), // 以非事务方式运行，如果当前存在事务，则把当前事务挂起 NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED), // 以非事务方式运行，如果当前存在事务，则抛出异常 NEVER(TransactionDefinition.PROPAGATION_NEVER), // 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于REQUIRED NESTED(TransactionDefinition.PROPAGATION_NESTED); private final int value; Propagation(int value) { this.value = value; } public int value() { return this.value; }} Isolation，事务隔离级别 事务的隔离机制，默认是数据库的隔离机制，需要是InnoDB引擎数据库才可以，MyISAM不支持事务 123456789101112131415161718192021222324public enum Isolation { // 默认值，表示使用底层数据库的默认隔离级别 DEFAULT(TransactionDefinition.ISOLATION_DEFAULT), // 读未提交：表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读，不可重复读和幻读，因此很少使用该隔离级别。比如PostgreSQL实际上并没有此级别 READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED), // 读取已提交：表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值 READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED), // 可重复读：表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。该级别可以防止脏读和不可重复读。 REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ), // 串行化：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别 SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE); private final int value; Isolation(int value) { this.value = value; } public int value() { return this.value; }} 数据库事务隔离级别： 事务隔离级别 脏读 不可重复读 幻读 读未提交（read-uncommitted） 是 是 是 读取已提交（read-committed） 否 是 是 可重复读（repeatable-read） 否 否 是 串行化（serializable） 否 否 否 三、事务失效的几种情况 @Transactional 应用在非 public 修饰的方法上 如果Transactional注解应用在非public 修饰的方法上，Transactional将会失效。 之所以会失效是因为在Spring AOP 代理时，如上图所示 TransactionInterceptor （事务拦截器）在目标方法执行前后进行拦截，DynamicAdvisedInterceptor（CglibAopProxy 的内部类）的 intercept 方法或 JdkDynamicAopProxy 的 invoke 方法会间接调用 AbstractFallbackTransactionAttributeSource的 computeTransactionAttribute 方法，获取Transactional 注解的事务配置信息。 123456protected TransactionAttribute computeTransactionAttribute(Method method, Class&lt;?&gt; targetClass) { // Don't allow no-public methods as required. if (allowPublicMethodsOnly() &amp;&amp; !Modifier.isPublic(method.getModifiers())) { return null;} 此方法会检查目标方法的修饰符是否为 public，不是 public则不会获取@Transactional 的属性配置信息。 注意：protected、private 修饰的方法上使用 @Transactional 注解，虽然事务无效，但不会有任何报错，这是我们很容犯错的一点。 @Transactional 注解属性 propagation 设置错误 错误的配置SUPPORTS、NOT_SUPPORTED、NEVER三个事务隔离级别，事务将不会发生回滚 try-catch之后没有抛出对应的异常 检查异常不会回滚，例如： Java.lang.ClassNotFoundException Java.lang.NoSuchMetodException java.io.IOException 同一个类中方法调用，导致@Transactional失效 数据库引擎不支持事务","link":"/post/7c780c79.html"},{"title":"Chrome 显示“www”和“https://”","text":"Chrome版本：80.0.3987.149（正式版本） （64 位） 方法1：设置Chrome（本版本无效） 打开 Chrome 浏览器并在地址栏中输入 chrome://flags/#omnibox-ui-hide-steady-state-url-scheme-and-subdomains 然后按回车，Chrome 将打开一个页面，显示Omnibox UI Hide Steay-State URL Scheme and Trivial Subdomains设置，将此设置更改为禁用，然后浏览器将显示一个提示，你需要重新启动浏览器才能使设置生效，单击“立即重新启动”按钮，浏览器将重新启动即可。 方法2：安装可疑站点报告扩展（推荐） 安装Chrome 的 Suspicious Site Reporter 扩展，Chrome 将停止隐藏www和https。","link":"/post/23764383.html"},{"title":"Hexo发布后，Github Pages的Custom domain配置项被清空是什么原因？","text":"原因：如果你正在使用一个自定义域名去重定向你的 GitHub Pages，你必须创建和提交一个包含自定义域名的 CNAME 文件到你的 GitHub Pages 存储库中。 GitHub文档说明 解决方案：在hexo项目根目录下的source文件夹下创建一个文件名为CNAME的无后缀名的文件，里面添加一行自定义域名，例如：www.example.com。 详细方案 Custom domain路径：github项目 -&gt; Settings -&gt; GitHub Pages -&gt; Custom domain","link":"/post/55637.html"},{"title":"JavaScript展示网站运行时间","text":"Html标签： 1&lt;span id=\"runtime_span\"&gt;本站已勉强运⾏ --- 天 -- ⼩时 -- 分 -- 秒&lt;/span&gt; JavaScript： 123456789101112131415161718&lt;script type=\"text/javascript\"&gt; function show_runtime() { // window.setTimeout(\"show_runtime()\", 1000); X = new Date(\"2020-01-01 00:00:00\"); Y = new Date(); T = (Y.getTime() - X.getTime()); M = 24 * 60 * 60 * 1000; a = T / M; A = Math.floor(a); b = (a - A) * 24; B = Math.floor(b); c = (b - B) * 60; C = Math.floor((b - B) * 60); D = Math.floor((c - C) * 60); runtime_span.innerHTML = \"本站已勉强运⾏ \" + A + \" 天 \" + B + \" ⼩时 \" + C + \" 分 \" + D + \" 秒 \"; } setInterval(\"show_runtime()\", 500);&lt;/script&gt;","link":"/post/25704.html"},{"title":"外部js调用vue的methods中的方法","text":"原文链接 浏览器Window对象 所有浏览器都支持 window 对象，它表示浏览器窗口 所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员 全局变量是 window 对象的属性 全局函数是 window 对象的方法 甚至 HTML DOM 的 document 也是 window 对象的属性之一：1window.document.getElementById(\"header\"); 等价于：1document.getElementById(\"header\"); 因此，只要把methods里面定义的方法赋值给window对象即可 12345678910111213141516export default { data() { return { title: '首页', } }, mounted() { // methods里面定义的方法赋值给window window.jingli = this.jingli; }, methods: { jingli() { console.log('Hello world!'); } }} 这样就可以通过调用jingli()来调用vue的methods中的 jingli()","link":"/post/41003509.html"},{"title":" Windows命令行关闭本地占用的端口","text":"1.查找对应的端口占用的进程 1netstat -aon|findstr &quot;8080&quot; 2.根据PID号找到对应的程序 1tasklist|findstr &quot;PID号&quot; 3.根据[应用名]结束该进程 1taskkill /f /t /im javaw.exe 4.或者根据[pid]直接结束进程（常用） 1taskkill /pid 1477 /F","link":"/post/10595.html"},{"title":"重置JetBrains全家桶30天试用期","text":"1234567891011121314151617181920212223242526#!/bin/sh# reset jetbrains ide evalsOS_NAME=$(uname -s)JB_PRODUCTS=\"IntelliJIdea CLion PhpStorm GoLand PyCharm WebStorm Rider DataGrip RubyMine AppCode\"if [ $OS_NAME == \"Darwin\" ]; then echo 'macOS:' for PRD in $JB_PRODUCTS; do rm -rf ~/Library/Preferences/${PRD}*/eval rm -rf ~/Library/Application\\ Support/JetBrains/${PRD}*/eval doneelif [ $OS_NAME == \"Linux\" ]; then echo 'Linux:' for PRD in $JB_PRODUCTS; do rm -rf ~/.${PRD}*/config/eval rm -rf ~/.config/${PRD}*/eval doneelse echo 'unsupport' exitfiecho 'done.'","link":"/post/3ee351c1.html"},{"title":"Linq的3种查询方式","text":"1int[] numbers={2,5,28,31,17,16,42}; 1. 查询语法123var numsQuery=from n in numbers where n&lt;20 select n; 2. 方法语法1var numsMethod = numbers.Where(x =&gt; x &lt; 20); 3. 两种形式的组合123var numsCount=(from n in numbers where n &lt; 20 select n).Count();","link":"/post/10325.html"},{"title":"uploader在ie8下出现保存窗口","text":"最后修改于：2016-06-01 10:01:47 text/html &amp; text/plain的区别 需要了解的概念 Content-Type：用于定义用户的浏览器或相关设备如何显示将要加载的数据，或者如何处理将要加载的数据 MIME：MIME类型就是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。 text/html的意思是将文件的content-type设置为text/html的形式，浏览器在获取到这种文件时会自动调用html的解析器对文件进行相应的处理。text/plain的意思是将文件设置为纯文本的形式，浏览器在获取到这种文件时并不会对其进行处理。 原因：uploader在ie8-下调用的是iframe加载action配置的地址，地址的响应头不对导致出现保存窗口 解决方案：将返回时的响应头类型设置为text/plain Response.ContentType=&quot;text/html&quot;; 或 return Json ( new { status , message , imgurl = returnImgUrl }, &quot;text/plain&quot; );","link":"/post/29459.html"},{"title":"使用快慢指针判断链表中的环","text":"快慢指针中，因为每一次移动后，快指针都会比慢指针多走一个节点，所以他们之间在进入环状链表后，不论相隔多少个节点，慢指针总会被快指针赶上并且重合，此时就可以判断必定有环。 12345678910111213141516171819public boolean hasCycle(ListNode head) { if (head == null || head.next == null) { return false; } ListNode fast = head; ListNode low = head; while (fast != null &amp;&amp; fast.next != null) { fast = fast.next.next; low = low.next; if (low.equals(fast)) { return true; } } return false;}","link":"/post/10361.html"},{"title":"swagger-ui升级swagger-bootstrap-ui","text":"maven引用 12345&lt;dependency&gt; &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt; &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt; &lt;version&gt;1.9.6&lt;/version&gt;&lt;/dependency&gt; 相关链接及问题解决方案：开源地址相关FAQ","link":"/post/41669.html"},{"title":"Linux 下重置 MySQL 的 root 密码","text":"很久没用 MySQL 了，最近在学 JAVA 又捡起来了，不过把 root 密码忘记了，网上查了下资料解决了，在这记录一下，以防以后又忘了。 1. 进入到 mysql 里面：执行命令 1cd /etc/mysql 进入 mysql 默认安装目录下 使用 vim 编辑器查看里面的用户名和密码 1sudo vim/vi debian.cnf 然后使用这个文件中的用户名和密码进入 mysql 假如 debian.cnf 中的用户名为 debian-sys-maint,则：mysql -u debian-sys-maint -p按回车，这时需要你输入密码，复制debian.cnf中的密码（不要手动输入，因为容易产生错误）。 此时你就能进入到 mysql 里面了。 2. 修改 root 密码根据上一步登录 mysql 客户端 12345678mysql&gt; use mysql;Database changedmysql&gt; update user set password=password('new password') where user='root';Query OK, 4 rows affected (0.00 sec)Rows matched: 4 Changed: 4 Warnings: 0mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; quit 3. 修改完成,用新改的 root 和密码登录查看。","link":"/post/14477.html"},{"title":"CentOS 安装rz和sz命令","text":"安装命令： 1yum install -y lrzsz sz：将选定的文件发送（send）到本地机器 rz：运行该命令会弹出一个文件选择窗口，从本地选择文件上传到服务器(receive)","link":"/post/10902.html"},{"title":"Redis Windows客户端下载","text":"貌似新版收费了，这是可用的老版本redis-desktop-manager-0.9.3.817 如链接不可用，请留言","link":"/post/55603.html"},{"title":"Hello Hexo 快速开始","text":"安装Hexo12345$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server 创建一篇文章1$ hexo new \"My New Post\" 更多: Writing 运行服务1$ hexo server 更多: Server 生成静态文件1$ hexo generate 更多: Generating 发布到远程站点1$ hexo deploy 更多: Deployment 安装hexo-admin插件123$ npm install --save hexo-admin$ hexo server -d访问：http://localhost:4000/admin/ 更多: hexo-admin","link":"/post/11381.html"},{"title":"Sql插入数据后立即返回插入的数据","text":"最后修改于：2016-04-10 01:09:04 在mssql里@@identity可用来返回当前插入的新数据的主键值，于是想到了返回整条数据： 1234INSERT INTO User( username , authguid ) VALUES ( 'zhangsan', NEWID() )SELECT *FROM UserWHERE Id = @@identity;","link":"/post/56005.html"},{"title":"HTML标签命名规则","text":"最后修改于：2016-06-01 10:11:41 （一）标签写法 1. 标题：title 2. 摘要：summary 3. 箭头：arrow 4. 商标：lable 5. 网站标志：logo 6. 转角/圆角：corner 7. 横幅广告：banner 8. 子菜单：subMenu 9. 搜索：search 10. 搜索框：searchBox 11. 登录：login 12. 登录条：loginbar 13. 工具条：toolbar 14. 下拉：drop 15. 标签页：tab 16. 当前的：current 17. 列表：list 18. 滚动：scroll 19. 服务：service 20. 提示信息：msg 21. 热点：hot 22. 新闻：news 23. 小技巧：tips 24. 下载：download 25. 栏目标题：title 26. 热点：hot 27. 加入：joinus 28. 注册：regsiter 29. 指南：guide 30. 友情链接：friendlink 31. 状态：status 32. 版权：copyright 33. 按钮：btn 34. 合作伙伴：partner 35. 投票：vote 36. 左右中：left right center（二）注释写法 1. /* Footer */ 2. 内容区 3. /* End Footer */（三）id的命名 （1）页面结构 1. 容器：container 2. 页头：header 3. 内容：content/container 4. 页面主体：main 5. 页尾：footer 6. 导航：nav 7. 侧栏：sidebar 8. 栏目：column 9. 页面外围控制整体布局宽度：warpper（四）导航 1. 导航：nav 2. 主导航：mainnav 3. 子导航：subnav 4. 顶导航：topnav 5. 边导航：sidenav","link":"/post/54304.html"},{"title":"CSS标签命名规则","text":"最后修改于：2016-06-01 10:15:46 头：header 内容：content/container 尾：footer 导航：nav 侧栏：sidebar栏目：column 页面外围控制整体布局宽度：wrapper 左右中：left right center 登录条：loginbar 标志：logo 广告：banner 页面主体：main 热点：hot 新闻：news下载：download 子导航：subnav 菜单：menu 子菜单：submenu 搜索：search 友情链接：friendlink 页脚：footer 版权：copyright 滚动：scroll 内容：content标签页：tab文章列表：list提示信息：msg小技巧：tips栏目标题：title加入：joinus指南：guild服务：service注册：regsiter状态态：status投票：vote合作伙伴：partner 注释的写法/* Footer /内容区/ End Footer */ id的命名容器: container页头：header内容：content/container页面主体：main页尾：footer导航：nav侧栏：sidebar栏目：column页面外围控制整体布局宽度：wrapper左右中：left right center 页面结构容器: container页头：header内容：content/container页面主体：main页尾：footer导航：nav侧栏：sidebar栏目：column页面外围控制整体布局宽度：wrapper左右中：left right center 导航导航：nav主导航：mainbav子导航：subnav顶导航：topnav边导航：sidebar左导航：leftsidebar右导航：rightsidebar菜单：menu子菜单：submenu标题: title摘要: summary 功能标志：logo广告：banner登陆：login登录条：loginbar注册：regsiter搜索：search功能区：shop标题：title加入：joinus状态：status按钮：btn滚动：scroll标签页：tab文章列表：list提示信息：msg当前的: current小技巧：tips图标: icon注释：note指南：guild服务：service热点：hot新闻：news下载：download投票：vote合作伙伴：partner友情链接：link版权：copyright class的命名(1)颜色:使用颜色的名称或者16进制代码,如.red { color: red; }.f60 { color: #f60; }.ff8600 { color: #ff8600; } (2)字体大小,直接使用”font+字体大小”作为名称,如.font12px { font-size: 12px; }.font9pt {font-size: 9pt; } (3)对齐样式,使用对齐目标的英文名称,如 .left { float:left; }.bottom { float:bottom; } (4)标题栏样式,使用”类别+功能”的方式命名,如.barnews { }.barproduct { } 注意事项 1.一律小写; 2.尽量用英文; 3.不加中杠和下划线; 4.尽量不缩写，除非一看就明白的单词. 主要的 master.css 模块 module.css 基本共用 base.css 布局，版面 layout.css 主题 themes.css 专栏 columns.css 文字 font.css 表单 forms.css 补丁 mend.css 打印 print.css","link":"/post/2737.html"},{"title":"Java 知识大纲整理","text":"基础知识 容器 集合——Collection List ArrayList LinkedList Vector Set HashSet TreeSet LinkedHashSet Queue PriorityQueue 键值对——Map HashMap HashTable TreeMap Spring 源码 Spring 中的基本概念 Spring 设计模式 Spring Bean Spring Context Spring Transaction Spring MVC Spring 5 新特性 Spring 整合 Mybatis 并发编程 Java 内存模型(JMM) synchronized 原理分析 volatile 原理分析 DCL 并发基础 锁 并发工具类 并发集合 原子操作 线程池 线程通信 final 内存语义 MySQL 调优与最佳实践 数据库引擎 事务与锁 索引 SQL 优化 参考资料： 拉勾网《32 个 Java 面试必考点》 必须深入理解的 50 个 JAVA 基础概念 经验分享 01 经验分享 02 剑指 Offer 编程训练 分布式理论基础","link":"/post/25395.html"},{"title":"OSX运行软件提示易损坏解决方案","text":"提示“来自身份不明开发者、文件已损坏、磁盘无法挂载”以及macOS Sierra 不显示 “任何来源”的解决办法↓ 情况一:双击.dmg安装包出现“打不开以下磁盘映像”的警告，可能是文件下载过程中出现了未知问题 或者没有下载完整，解决办法就是重新下载安装包; 情况二:提示“app已损坏，打不开。”，或者“打不开xxx因为它来自身份不明的 开发者”的解决办法; 打开”安全性偏好设置“- “安全性与隐私” - “通用”; 点击左下角“解锁” 勾选允许“任何来源”，锁上小锁 macOS Sierra 10.12 不显示“任何来源”的解决办法: 打开MacOS终端，然后将sudo spctl --master-disable拷贝，在终端窗口粘贴，敲回车，提示输入 password(开机密码)，输入密码，密码是看不见的，输完敲回车; 可能“任何来源”将再次显示，勾选它，锁上左下角小锁即可。","link":"/post/49638.html"},{"title":"Lombok 插件注解使用详解","text":"官方文档Lombok featuresLombok javadoc valFinally! Hassle-free final local variables. varMutably! Hassle-free local variables. @NonNullor: How I learned to stop worrying and love the NullPointerException. @CleanupAutomatic resource management: Call your close() methods safely with no hassle. @Getter/@SetterNever write public int getFoo() {return foo;} again. @ToStringNo need to start a debugger to see your fields: Just let lombok generate a toString for you! @EqualsAndHashCodeEquality made easy: Generates hashCode and equals implementations from the fields of your object.. @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructorConstructors made to order: Generates constructors that take no arguments, one argument per final / non-&gt; nullfield, or one argument for every field. @DataAll together now: A shortcut for @ToString, @EqualsAndHashCode, @Getter on all fields, and @Setter on all non-final fields, and @RequiredArgsConstructor! @ValueImmutable classes made very easy. @Builder… and Bob’s your uncle: No-hassle fancy-pants APIs for object creation! @SneakyThrowsTo boldly throw checked exceptions where no one has thrown them before! @Synchronizedsynchronized done right: Don’t expose your locks. @WithImmutable ‘setters’ - methods that create a clone but with one changed field. @Getter(lazy=true)Laziness is a virtue! @LogCaptain’s Log, stardate 24435.7: “What was that line again?” experimentalHead to the lab: The new stuff we’re working on. 更新日期：2019-10-22","link":"/post/54046.html"}],"tags":[{"name":"idea","slug":"idea","link":"/tags/idea/"},{"name":"logger","slug":"logger","link":"/tags/logger/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"maven","slug":"maven","link":"/tags/maven/"},{"name":"jvm","slug":"jvm","link":"/tags/jvm/"},{"name":"jvisualvm","slug":"jvisualvm","link":"/tags/jvisualvm/"},{"name":"springboot","slug":"springboot","link":"/tags/springboot/"},{"name":"mybatis","slug":"mybatis","link":"/tags/mybatis/"},{"name":"mybatisplus","slug":"mybatisplus","link":"/tags/mybatisplus/"},{"name":"soft","slug":"soft","link":"/tags/soft/"},{"name":"lambda","slug":"lambda","link":"/tags/lambda/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"centos","slug":"centos","link":"/tags/centos/"},{"name":"selinux","slug":"selinux","link":"/tags/selinux/"},{"name":"firewalld","slug":"firewalld","link":"/tags/firewalld/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"network","slug":"network","link":"/tags/network/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"nacos","slug":"nacos","link":"/tags/nacos/"},{"name":"rabbitmq","slug":"rabbitmq","link":"/tags/rabbitmq/"},{"name":"redis","slug":"redis","link":"/tags/redis/"},{"name":"zipkin","slug":"zipkin","link":"/tags/zipkin/"},{"name":"port","slug":"port","link":"/tags/port/"},{"name":"mirrors","slug":"mirrors","link":"/tags/mirrors/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"cen to s","slug":"cen-to-s","link":"/tags/cen-to-s/"},{"name":"mac","slug":"mac","link":"/tags/mac/"},{"name":"istat","slug":"istat","link":"/tags/istat/"},{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"install","slug":"install","link":"/tags/install/"},{"name":"vmware","slug":"vmware","link":"/tags/vmware/"},{"name":"junit","slug":"junit","link":"/tags/junit/"},{"name":"transactional","slug":"transactional","link":"/tags/transactional/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"chrome","slug":"chrome","link":"/tags/chrome/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"cmd","slug":"cmd","link":"/tags/cmd/"},{"name":"dotnet","slug":"dotnet","link":"/tags/dotnet/"},{"name":"swagger-ui","slug":"swagger-ui","link":"/tags/swagger-ui/"},{"name":"sql","slug":"sql","link":"/tags/sql/"},{"name":"mssql","slug":"mssql","link":"/tags/mssql/"},{"name":"Lombok","slug":"Lombok","link":"/tags/Lombok/"},{"name":"Tools","slug":"Tools","link":"/tags/Tools/"}],"categories":[{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","link":"/categories/Java/SpringBoot/"},{"name":"Other","slug":"Java/Other","link":"/categories/Java/Other/"},{"name":"Tools","slug":"Java/Tools","link":"/categories/Java/Tools/"},{"name":"Maven","slug":"Java/Maven","link":"/categories/Java/Maven/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Soft","slug":"Soft","link":"/categories/Soft/"},{"name":"CentOS","slug":"Linux/CentOS","link":"/categories/Linux/CentOS/"},{"name":"Web","slug":"Web","link":"/categories/Web/"},{"name":"Docker","slug":"Linux/Docker","link":"/categories/Linux/Docker/"},{"name":"Git","slug":"Linux/Git","link":"/categories/Linux/Git/"},{"name":"Mac","slug":"Soft/Mac","link":"/categories/Soft/Mac/"},{"name":"Chrome","slug":"Web/Chrome","link":"/categories/Web/Chrome/"},{"name":"Hexo","slug":"Web/Hexo","link":"/categories/Web/Hexo/"},{"name":"JavaScript","slug":"Web/JavaScript","link":"/categories/Web/JavaScript/"},{"name":"Vue","slug":"Web/Vue","link":"/categories/Web/Vue/"},{"name":"Windows","slug":"Soft/Windows","link":"/categories/Soft/Windows/"},{"name":"DotNet","slug":"DotNet","link":"/categories/DotNet/"},{"name":"Html","slug":"Web/Html","link":"/categories/Web/Html/"},{"name":"MySql","slug":"Linux/MySql","link":"/categories/Linux/MySql/"},{"name":"Blog","slug":"Blog","link":"/categories/Blog/"},{"name":"Sql","slug":"Sql","link":"/categories/Sql/"},{"name":"MsSql","slug":"Sql/MsSql","link":"/categories/Sql/MsSql/"}]}